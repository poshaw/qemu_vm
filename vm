#! /bin/bash


vmdir="${HOME}/vm"


continuePromptYes(){
	# helper function that exits script unless user types (y)es
	if [[ ! -z ${1+x} ]]; then
		question=${1}
	else
		question="Continue?"
	fi
	# make sure user inputs a response starting with y or n
	while true; do
		read -r -p "${question} [Y/n]: " response
		response=${response,,}    # tolower
		if [[ "$response" =~ ^(yes|y)$ ]] || [ -z "$response" ]; then
			# User wants to continue so break while
			break
		elif [[ "$response" =~ ^(no|n)$ ]]; then
			# User does not want to contiue, so exit
			echo "exiting ${BASH_SOURCE[0]}"
			exit 0
		fi
	done
}


continuePromptNo(){
	if [[ ! -z ${1+x} ]]; then
		question=${1}
	else
		question="Continue?"
	fi
	while true; do
		read -r -p "${question} [y/N]: " response
		response=${response,,}    # tolower
		# printf "%q\n" "$response"
		if [[ "$response" =~ ^(yes|y)$ ]]; then
			# echo "YES"
			break
		elif [[ "$response" =~ ^(no|n)$ ]] || [ -z "$response" ]; then
			# echo "NO"
			exit 0
		fi
	done
}


# test if pv is installed with which
# we don't need any output from which so supress output to /dev/null
if ! which pv 2>/dev/null 1>&2; then
	continuePromptYes "This script needs pv, install it now?"
	sudo pacman -Syu pv
fi


usage() {
	name="VM-NAME"
	# Usage message shows available flags and expected arguements 
	echo "Usage: $0 [option] ${name}" 1>&2
	echo -e "\noptions:" 1>&2
	# -h
	echo -e "[ -h ] :
\tprint help" 1>&2
	# -t
	echo -e "[ -t ] :
\trun tests" 1>&2
	# -n
	echo -e "[ -n ${name} ] :
\tmake a new virtual machine named ${name} ex:
\t$ $0 -n ${name}
\tcreates a new vm located at:
\t${vmdir}/${name}/" 1>&2
	# -a
	echo -e "[ -a ${name} ] :
\tarchive virtual machine" 1>&2
	# -e
	echo -e "[ -e ARCHIVE.tar.gz ] :
\textract an archived virtual machine" 1>&2
}


exit_abnormal() {
	# helper function for non 0 script exit
	usage
	exit 1
}


makeVM(){
	# function to create a new virtual machine
	# function expects a template.tar.gz as a basis for new VMs
	newvm=${1}
	# if vmdir does not exist, create it
	if [[ ! -d ${vmdir} ]]; then
	  mkdir -p ${vmdir}
	fi
	cd ${vmdir}
	# check if vm already exists
	if [[ -d ${vmdir}/${newvm} ]]; then
		continuePromptNo "${vmdir}/${newvm} already exists:  Overwrite?"
		rm -rf ${vmdir}/${newvm}
	fi
	# check for template.tar.gz
	# test for file existence with wildcard in filename
	if compgen -G "${vmdir}/template*.tar.gz" > /dev/null; then
		echo "making virtual machine: ${newvm}"
		# get a new copy of latest template and change it to newVM
		rm -rf template/
		extractVM $(ls -t ${vmdir}/template*tar.gz | head -n1)
		mv "template" "${newvm}"
	else
		echo "ERROR: ${vmdir}/template.tar.gz not found"
		echo "       This file is required as basis for new machines"
		exit 1
	fi
	# run create in newVM
	${vmdir}/${newvm}/create
}


testMakeVM(){
	# function tests makeVM()
	funcName="makeVM()"
	echo -e "\nTesting: ${funcName}"
	# change working directory to where this script's location
	cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
	vmName=testVM
	rm -rf "${vmdir}/${vmName}"
	./vm -n ${vmName}
	if [[ -f ${vmdir}/${vmName}/run ]]; then
		echo "${funcName} test results: PASS"
		rval=0
	else
		echo "${funcName} test results: FAIL"
		rval=1
	fi
	# clean up after yourself
	# remove testVM
	rm -rf "${vmdir}/${vmName}"
	return ${rval}
}


archiveVM(){
	# check if file exists
	if [[ -d ${HOME}/vm/${1} ]]; then
		cd ${HOME}/vm
		tar cf - ${1} -P | pv -s $(du -sb ${1} | awk '{print $1}') | gzip > "${1}_$(date +'%Y%m%d_%H%M').tar.gz"
	else
		echo "Error: \"${HOME}/vm/${1}\" not found"
		exit_abnormal
	fi
	return 0
}


testArchiveVM(){
	# function tests archiveVM()
	funcName="archiveVM()"
	echo -e "\nTesting: ${funcName}"
	cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
	pre=$(ls -1 ${vmdir}/template*tar.gz | wc -l)
	# extract template, so we can archive it
	rm -rf "${vmdir}/template"
	./vm -e $(ls -t ${vmdir}/template*tar.gz | head -1)

	# archive template
	./vm -a template
	post=$(ls -1 ${vmdir}/template*tar.gz | wc -l)
	if [[ ${post} -gt ${pre} ]]; then
		echo "${funcName} test results: PASS"
		rval=0
	else
		echo "${funcName} test results: FAIL"
		rval=1
	fi
	# clean up after yourself
	# delete extracted template folder
	rm -rf ${vmdir}/template
	# delete all but newest template.tar.gz
	ls -t ${vmdir}/template*tar.gz | tail -n +2 | xargs rm --
	return ${rval}
}


extractVM(){
	# check if archive exists
	cd ${vmdir}
	echo "Extracting VM: ${1}"
	file="$(basename "${1}")"
	# if [[ -f ${vmdir}/${file} ]]; then
		# cd ${vmdir}
	if [[ -f ${file} ]]; then
		pv "${file}" | tar xvz
	fi
}


testExtractVM(){
	# function tests extractVM()
	funcName="extractVM()"
	echo -e "\nTesting: ${funcName}"
	cd "$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null 2>&1 && pwd )"
	rm -rf "${vmdir}/template"
	./vm -e $(ls -t ${vmdir}/template*tar.gz | head -1)
	if [[ -f ${vmdir}/template/run ]]; then
		echo "${funcName} test results: PASS"
		rval=0
	else
		echo "${funcName} test results: FAIL"
		rval=1
	fi
	# clean up after yourself
	rm -rf "${vmdir}/template"
	return ${rval}
}


runTests(){
	# test extractVM()
	if ! testExtractVM; then
		exit 1
	fi

	# test makeVM()
	if ! testMakeVM; then
		exit 1
	fi

	# test archiveVM()
	if ! testArchiveVM; then
		exit 1
	fi

	# test usage()
	echo -e "\nTesting: usage()"
	usage
}


if [[ $# -lt 1 ]]; then
	echo "Error: insuficient arguements provided"
	exit_abnormal
fi


# parse arguments
while getopts 'a:e:hn:t' option; do
	case "${option}" in
		a)
			archiveVM ${OPTARG}
			exit 0
			;;
		e)
			extractVM ${OPTARG}
			exit 0
			;;
		h)
			usage
			exit 0
			;;
		n)
			makeVM ${OPTARG}
			exit 0
			;;
		t)
			runTests
			exit 0
			;;
		*)                         # If unknown (any other) option:
			exit_abnormal
			;;
	esac
done
